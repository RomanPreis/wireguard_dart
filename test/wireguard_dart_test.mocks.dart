// Mocks generated by Mockito 5.4.5 from annotations
// in wireguard_dart/test/wireguard_dart_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:wireguard_dart/connection_status.dart' as _i5;
import 'package:wireguard_dart/key_pair.dart' as _i2;
import 'package:wireguard_dart/wireguard_dart_platform_interface.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeKeyPair_0 extends _i1.SmartFake implements _i2.KeyPair {
  _FakeKeyPair_0(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

/// A class which mocks [WireguardDartPlatform].
///
/// See the documentation for Mockito's code generation for more information.
class MockWireguardDartPlatform extends _i1.Mock implements _i3.WireguardDartPlatform {
  MockWireguardDartPlatform() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.KeyPair> generateKeyPair() => (super.noSuchMethod(
        Invocation.method(#generateKeyPair, []),
        returnValue: _i4.Future<_i2.KeyPair>.value(
          _FakeKeyPair_0(this, Invocation.method(#generateKeyPair, [])),
        ),
      ) as _i4.Future<_i2.KeyPair>);

  @override
  _i4.Future<void> nativeInit() => (super.noSuchMethod(
        Invocation.method(#nativeInit, []),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setupTunnel({
    required String? bundleId,
    required String? tunnelName,
    String? win32ServiceName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#setupTunnel, [], {
          #bundleId: bundleId,
          #tunnelName: tunnelName,
          #win32ServiceName: win32ServiceName,
        }),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> connect({required String? cfg}) => (super.noSuchMethod(
        Invocation.method(#connect, [], {#cfg: cfg}),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> disconnect() => (super.noSuchMethod(
        Invocation.method(#disconnect, []),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i5.ConnectionStatus> status() => (super.noSuchMethod(
        Invocation.method(#status, []),
        returnValue: _i4.Future<_i5.ConnectionStatus>.value(
          _i5.ConnectionStatus.connecting,
        ),
      ) as _i4.Future<_i5.ConnectionStatus>);

  @override
  _i4.Stream<_i5.ConnectionStatus> statusStream() => (super.noSuchMethod(
        Invocation.method(#statusStream, []),
        returnValue: _i4.Stream<_i5.ConnectionStatus>.empty(),
      ) as _i4.Stream<_i5.ConnectionStatus>);

  @override
  _i4.Future<bool> checkTunnelConfiguration({
    required String? bundleId,
    required String? tunnelName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#checkTunnelConfiguration, [], {
          #bundleId: bundleId,
          #tunnelName: tunnelName,
        }),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
